?acf
bla = read.csv("ict.csv",head=F)
a = hist(bla$V1,breaks = seq(0,max(bla$V1),by=1))
png("periodicity.png")
plot(a$mids,a$density,type="l",ylim = c(0,0.007),xlim = c(0,400), xlab = "Time(h)", ylab="Frequency of group reencounters")
abline(v=seq(24,720,by=24),lty=3,col="red",lwd=1)
abline(v=seq(7*24+2,720,by=7*24),lty=2,col="green",lwd=1)
dev.off()
acf(a$density)
acf(a$density, lag.max = 200)
suppressMessages(library(splines))
# function by Rob Hyndman using series spectrum, at
# http://stats.stackexchange.com/questions/1207/period-detection-of-a-generic-time-series
feat.period <- function(x)
{
if (var(x) == 0)
{
period = 1
}
else
{
n <- length(x)
spec <- spec.ar(c(x),plot=FALSE,, na.action=na.exclude)
if(max(spec$spec)>10) # Arbitrary threshold chosen by trial and error.
{
period <- round(1/spec$freq[which.max(spec$spec)])
if(period==Inf) # Find next local maximum
{
j <- which(diff(spec$spec)>0)
if(length(j)>0)
{
nextmax <- j[1] + which.max(spec$spec[j[1]:500])
# adjust to handle the "exponential" spectrum case
if (nextmax > length(spec$freq))
{
period = 1
} else {
period <- round(1/spec$freq[nextmax])
}
}
else
period <- 1
}
}
else
{
period <- 1
}
}
return(list(period = period))
}
feat.period.paper = function(Y)
{
Y = na.omit(Y)
# Calculate the 3rd feature: periodicity
########################################
# algorithm to calculate periodicity, based on Wang et al.
# 1. Detrend time series using a regression spline with 3 knots
# 2. Find r_k = Corr(Yt , Yt−k) (autocorrelation function) for all
#    lags up to 1/3 of series length, then look for peaks and troughs
#    in autocorrelation function.
# 3. Frequency is the first peak provided with following conditions:
#    (a) there is also a trough before it;
#    (b) the difference between peak and trough is at least 0.1;
#    (c) the peak corresponds to positive correlation.
# 4. If no such peak is found, frequency is set to 1 (equivalent to
#    non-seasonal).
# size of the time series
n = length(Y)
# 1. detrending
###############
# defining the X axis
X = 1:n
# doing the cubic splines with 3 knots
fit = lm(Y ~ ns(X, df=4))
# obs.: the knots option is different: you have not requested 3
# knots, but rather have requested a single (interior) knot at
# location 3
# the Y detrended
Ydet = Y - fit$fitted.values
# 2. autocorrelation
####################
# the lag
Ylag = n/3
# computing the autocorrelation
Yacf = acf(Ydet, lag.max=Ylag, plot=F, na.action=na.exclude)
# 3. finding second peak
########################
# try the first global maximum
Yperiod = Yacf$lag[which.max(Yacf$acf)]
if(Yperiod == 0) # Find next local maximum
{
# discover the increasing diffs
j = which(diff(Yacf$acf)>0)
if(length(j) > 0)
{
# find the second maximum from the increasing diffs
nextmax = j[1] + which.max(Yacf$acf[j[1]:Ylag]) - 1
Yperiod = Yacf$lag[nextmax]
}
else
{
Yperiod = 1
}
}
return(list(period.paper = Yperiod))
}
bla = read.csv("ict.csv",head=F)
a = hist(bla$V1,breaks = seq(0,max(bla$V1),by=1))
png("periodicity.png")
plot(a$mids,a$density,type="l",ylim = c(0,0.007),xlim = c(0,400), xlab = "Time(h)", ylab="Frequency of group reencounters")
abline(v=seq(24,720,by=24),lty=3,col="red",lwd=1)
abline(v=seq(7*24+2,720,by=7*24),lty=2,col="green",lwd=1)
dev.off()
feat.period(a$density)
feat.period.paper(a$density)
suppressMessages(library(splines))
# function by Rob Hyndman using series spectrum, at
# http://stats.stackexchange.com/questions/1207/period-detection-of-a-generic-time-series
feat.period <- function(x)
{
if (var(x) == 0)
{
period = 1
}
else
{
n <- length(x)
spec <- spec.ar(c(x),plot=FALSE,, na.action=na.exclude)
if(max(spec$spec)>10) # Arbitrary threshold chosen by trial and error.
{
period <- round(1/spec$freq[which.max(spec$spec)])
if(period==Inf) # Find next local maximum
{
j <- which(diff(spec$spec)>0)
if(length(j)>0)
{
nextmax <- j[1] + which.max(spec$spec[j[1]:500])
# adjust to handle the "exponential" spectrum case
if (nextmax > length(spec$freq))
{
period = 1
} else {
period <- round(1/spec$freq[nextmax])
}
}
else
period <- 1
}
}
else
{
period <- 1
}
}
return(list(period = period))
}
feat.period.paper = function(Y)
{
Y = na.omit(Y)
# Calculate the 3rd feature: periodicity
########################################
# algorithm to calculate periodicity, based on Wang et al.
# 1. Detrend time series using a regression spline with 3 knots
# 2. Find r_k = Corr(Yt , Yt−k) (autocorrelation function) for all
#    lags up to 1/3 of series length, then look for peaks and troughs
#    in autocorrelation function.
# 3. Frequency is the first peak provided with following conditions:
#    (a) there is also a trough before it;
#    (b) the difference between peak and trough is at least 0.1;
#    (c) the peak corresponds to positive correlation.
# 4. If no such peak is found, frequency is set to 1 (equivalent to
#    non-seasonal).
# size of the time series
n = length(Y)
# 1. detrending
###############
# defining the X axis
X = 1:n
# doing the cubic splines with 3 knots
fit = lm(Y ~ ns(X, df=4))
# obs.: the knots option is different: you have not requested 3
# knots, but rather have requested a single (interior) knot at
# location 3
# the Y detrended
Ydet = Y - fit$fitted.values
# 2. autocorrelation
####################
# the lag
Ylag = n/3
# computing the autocorrelation
Yacf = acf(Ydet, lag.max=Ylag, plot=F, na.action=na.exclude)
# 3. finding second peak
########################
# try the first global maximum
Yperiod = Yacf$lag[which.max(Yacf$acf)]
if(Yperiod == 0) # Find next local maximum
{
# discover the increasing diffs
j = which(diff(Yacf$acf)>0)
if(length(j) > 0)
{
# find the second maximum from the increasing diffs
nextmax = j[1] + which.max(Yacf$acf[j[1]:Ylag]) - 1
Yperiod = Yacf$lag[nextmax]
}
else
{
Yperiod = 1
}
}
return(list(period.paper = Yperiod))
}
bla = read.csv("ict.csv",head=F)
a = hist(bla$V1,breaks = seq(0,max(bla$V1),by=1))
png("periodicity.png")
plot(a$mids,a$density,type="l",ylim = c(0,0.007),xlim = c(0,400), xlab = "Time(h)", ylab="Frequency of group reencounters")
abline(v=seq(24,720,by=24),lty=3,col="red",lwd=1)
abline(v=seq(7*24+2,720,by=7*24),lty=2,col="green",lwd=1)
dev.off()
acf(a$density, lag.max = 200)
acf(a$density, lag.max = 400)
source("periodicity.R")
source("periodicity.R")
source("periodicity.R")
source("periodicity.R")
suppressMessages(library(splines))
# function by Rob Hyndman using series spectrum, at
# http://stats.stackexchange.com/questions/1207/period-detection-of-a-generic-time-series
feat.period <- function(x)
{
if (var(x) == 0)
{
period = 1
}
else
{
n <- length(x)
spec <- spec.ar(c(x),plot=FALSE,, na.action=na.exclude)
# if(max(spec$spec)>10) # Arbitrary threshold chosen by trial and error.
{
period <- round(1/spec$freq[which.max(spec$spec)])
if(period==Inf) # Find next local maximum
{
j <- which(diff(spec$spec)>0)
if(length(j)>0)
{
nextmax <- j[1] + which.max(spec$spec[j[1]:500])
# adjust to handle the "exponential" spectrum case
if (nextmax > length(spec$freq))
{
period = 1
} else {
period <- round(1/spec$freq[nextmax])
}
}
else
period <- 1
}
}
else
{
period <- 1
}
}
return(list(period = period))
}
feat.period.paper = function(Y)
{
Y = na.omit(Y)
# Calculate the 3rd feature: periodicity
########################################
# algorithm to calculate periodicity, based on Wang et al.
# 1. Detrend time series using a regression spline with 3 knots
# 2. Find r_k = Corr(Yt , Yt−k) (autocorrelation function) for all
#    lags up to 1/3 of series length, then look for peaks and troughs
#    in autocorrelation function.
# 3. Frequency is the first peak provided with following conditions:
#    (a) there is also a trough before it;
#    (b) the difference between peak and trough is at least 0.1;
#    (c) the peak corresponds to positive correlation.
# 4. If no such peak is found, frequency is set to 1 (equivalent to
#    non-seasonal).
# size of the time series
n = length(Y)
# 1. detrending
###############
# defining the X axis
X = 1:n
# doing the cubic splines with 3 knots
fit = lm(Y ~ ns(X, df=4))
# obs.: the knots option is different: you have not requested 3
# knots, but rather have requested a single (interior) knot at
# location 3
# the Y detrended
Ydet = Y - fit$fitted.values
# 2. autocorrelation
####################
# the lag
Ylag = n/3
# computing the autocorrelation
Yacf = acf(Ydet, lag.max=Ylag, plot=F, na.action=na.exclude)
# 3. finding second peak
########################
# try the first global maximum
Yperiod = Yacf$lag[which.max(Yacf$acf)]
if(Yperiod == 0) # Find next local maximum
{
# discover the increasing diffs
j = which(diff(Yacf$acf)>0)
if(length(j) > 0)
{
# find the second maximum from the increasing diffs
nextmax = j[1] + which.max(Yacf$acf[j[1]:Ylag]) - 1
Yperiod = Yacf$lag[nextmax]
}
else
{
Yperiod = 1
}
}
return(list(period.paper = Yperiod))
}
bla = read.csv("ict.csv",head=F)
a = hist(bla$V1,breaks = seq(0,max(bla$V1),by=1))
png("periodicity.png")
plot(a$mids,a$density,type="l",ylim = c(0,0.007),xlim = c(0,400), xlab = "Time(h)", ylab="Frequency of group reencounters")
abline(v=seq(24,720,by=24),lty=3,col="red",lwd=1)
abline(v=seq(7*24+2,720,by=7*24),lty=2,col="green",lwd=1)
dev.off()
png("auto_corr.png")
acf(a$density, lag.max = 400)
abline(v=seq(24,720,by=24),lty=3,col="red",lwd=1)
abline(v=seq(7*24+2,720,by=7*24),lty=2,col="green",lwd=1)
dev.off()
source("periodicity.R")
source("periodicity.R")
source("periodicity.R")
suppressMessages(library(splines))
bla = read.csv("ict.csv",head=F)
a = hist(bla$V1,breaks = seq(0,max(bla$V1),by=1))
png("periodicity.png")
plot(a$mids,a$density,type="l",ylim = c(0,0.007),xlim = c(0,400), xlab = "Time(h)", ylab="Frequency of group reencounters")
abline(v=seq(24,720,by=24),lty=3,col="red",lwd=1)
abline(v=seq(7*24+2,720,by=7*24),lty=2,col="green",lwd=1)
dev.off()
png("auto_corr.png")
acf(a$density, lag.max = 400,xlab="lag (h)",ylab="Auto-Correlation Function", main="")
abline(v=seq(24,720,by=24),lty=3,col="red",lwd=1)
abline(v=seq(7*24+2,720,by=7*24),lty=2,col="green",lwd=1)
dev.off()
